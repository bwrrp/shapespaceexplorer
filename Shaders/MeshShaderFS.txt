uniform sampler2DRect gbuffer0;
uniform sampler2DRect gbuffer1;

uniform float viewportX;
uniform float viewportY;

uniform vec3 cameraPos;

struct sample
{
	vec2 coord;
	vec3 position;
	float deformation;
	bool background;
	float depth;
};

sample GetSample(vec2 coord)
{
	sample result;
	result.coord = coord;
	vec4 gb0 = texture2DRect(gbuffer0, coord);
	vec4 gb1 = texture2DRect(gbuffer1, coord);
	result.position = gb0.rgb;
	result.deformation = gb0.a;
	result.background = gb1.a == 0.0;

	result.depth = distance(result.position, cameraPos);
	if (result.background) result.depth = 1000000.0;

	return result;
}

vec3 toLinearGamma(vec3 color)
{
	return pow((color + vec3(0.055))/ 1.055, 2.4);
}

vec3 toScreenGamma(vec3 color)
{
	return pow(1.055 * color, 1.0/2.4) - vec3(0.055);
}

vec3 interpolateColors(vec3 color1, vec3 color2, float t)
{
	return toScreenGamma(mix(toLinearGamma(color1), toLinearGamma(color2), t));
}

void main()
{
	vec2 coord = gl_FragCoord.xy;
	coord -= vec2(viewportX, viewportY);

	sample fragment = GetSample(coord);

	if (fragment.background) discard;

	vec3 color;

	// Compute screen-space normal
	// TODO: combine with SSAO for smoother normals
	// see http://www.spinnet.org/sven/ssn_ssao.frag
	float wx1 = GetSample(fragment.coord + vec2(-1.0, 0.0)).depth;
	float wx2 = GetSample(fragment.coord + vec2(1.0, 0.0)).depth;
	float wy1 = GetSample(fragment.coord + vec2(0.0, -1.0)).depth;
	float wy2 = GetSample(fragment.coord + vec2(0.0, 1.0)).depth;
	float dwx = (wx2 - wx1) * 0.5;
	float dwy = (wy2 - wy1) * 0.5;
	vec3 normal = normalize(cross(vec3(1.0, 0.0, dwx), vec3(0.0, 1.0, dwy)));

	float t = clamp(fragment.deformation / 2.0, -1.0, 1.0);
	color = interpolateColors(vec3(1.0, 1.0, 0.5), 
		t > 0.0 ? vec3(0.42, 0.76, 1.0) : vec3(0.8, 0.33, 0.32), 
		abs(t));
	//color = vec3(1.0);
	float alpha = 1.0;
	color *= 0.5 + 0.5 * max(dot(normal, normalize(gl_LightSource[0].position.xyz)), 0.0);
	gl_FragColor = vec4(color * alpha, alpha);
}
